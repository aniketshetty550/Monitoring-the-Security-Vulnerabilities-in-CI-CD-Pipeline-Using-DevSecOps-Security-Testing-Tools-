on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

name: cloudrun-deploy and security scanning

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  IMAGE: vuln-image
  PROFILE: prod
  DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    permissions:
      id-token: write
      contents: read
      actions: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3


    # Authenticate using the created credentials file.
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # Setup gcloud CLI.
    - uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT }}

    # Configure gcloud CLI
    - id: gcloud
      name: Configure gcloud CLI
      run: |-
        gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
        gcloud auth configure-docker us-central1-docker.pkg.dev
        gcloud components install docker-credential-gcr
        gcloud --quiet auth configure-docker

    # Generate Build ID
    - name: Generate Build ID
      id: prep
      run: |
        env=prod
        sha=${GITHUB_SHA::8}
        ts=$(date +%Y%m%d%H%M%S)
        echo "::set-output name=BUILD_ID::${env}-${ts}-${sha}"

    # Build and Push Docker Image
    - name: Build and Push Docker Image
      id: build
      run: |-
        gcloud auth configure-docker europe-docker.pkg.dev
        GCR_IMAGE=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/docker-repo/vuln-image:latest
        docker build . -t altoro-mutual --build-arg DD_GIT_REPOSITORY_URL=$(git config --get remote.origin.url) --build-arg DD_GIT_COMMIT_SHA=$(git rev-parse HEAD) --tag $GCR_IMAGE
        docker push $GCR_IMAGE
        echo "::set-output name=image::$GCR_IMAGE"

    
    # Run Snyk Test
    - name: Run Snyk Test
      continue-on-error: true
      run: |-
        npm install snyk -g
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk code test

    # Deploy to Cloud Run
    - name: Deploy to Cloud Run
      run: |-
        gcloud config set project $PROJECT_ID
        gcloud config set run/region us-central1
        gcloud run deploy vuln-image \
          --image=${{ steps.build.outputs.image }} \
          --platform managed \
          --allow-unauthenticated
        # Test if Datadog Agent is running
    - name: Check Datadog Agent State
      run: |
        curl -s --unix-socket /var/run/datadog/apm.socket http://localhost/info | jq
      env:
        DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        DD_AGENT_HOST: localhost
        DD_TRACE_AGENT_PORT: 8126
        DD_LOG_LEVEL: debug

    - name: Test Datadog Integration (EU)
      run: |
         curl -X POST "https://http-intake.logs.datadoghq.eu/v1/input" \
         -H "DD-API-KEY: $DD_API_KEY" \
         -H "Content-Type: application/json" \
         --http1.1 \
         -d '{
           "message": "Test log from GitHub Actions",
           "service": "altoro-mutual",
           "env": "prod",
           "version": "1.0.0"
         }'


    # Set up Java 17 for HawkScan
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Check Java Version
      run: java -version

    # Run HawkScan
    - name: Run HawkScan
      uses: stackhawk/hawkscan-action@v2.2.0
      with:
        apiKey: ${{ secrets.HAWKSCAN_API_KEY }}

    

