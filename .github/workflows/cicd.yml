on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

name: cloudrun-deploy and security scanning

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  IMAGE: vuln-image
  PROFILE: prod
  # WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
  # WIF_SA: ${{ secrets.WIF_SA_ACADEMY}}
  DATADOG_API_KEY: ce3cd01cc0cc4170b3159c2fe1a1d3b1

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    permissions:
      id-token: write
      contents: read
      actions: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI.
    - uses: google-github-actions/setup-gcloud@v2
      with:
          project_id: ${{ env.PROJECT_ID }}
          #service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
          #export_default_credentials: true
     # Configure Workload Identity Federation via a credentials file
    # - id: 'auth'
    #   name: 'Authenticate to Google Cloud'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     workload_identity_provider: ${{ env.WIF_PROVIDER }}
    #     service_account: ${{ env.WIF_SA }}
    # Authenticate using the created credentials file.
    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    # WARNING: The --cred-file flag is in preview and is subject to change
    - id: 'gcloud'
      name: 'gcloud'
      run: |-
        gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
        gcloud auth configure-docker us-central1-docker.pkg.dev
        gcloud components install docker-credential-gcr
        gcloud --quiet auth configure-docker
    - name: Generate build ID
      id: prep
      run: |
          env=prod
          sha=${GITHUB_SHA::8}
          ts=$(date +%Y%m%d%H%M%S)
          echo "::set-output name=BUILD_ID::${env}-${ts}-${sha}"
    - name: Build docker
      id: build
      run: |-
        gcloud auth configure-docker \
          europe-docker.pkg.dev
        GCR_IMAGE=us-central1-docker.pkg.dev/absolute-advice-442515-h8/docker-repo/dvwa:latest
        docker build . --tag $GCR_IMAGE
        docker push $GCR_IMAGE
        echo "::set-output name=image::$GCR_IMAGE"
    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@0.28.0
    #   with:
    #     image-ref: '${{ steps.build.outputs.image }}'
    #     cache-dir: '/var/lib/trivy'
    #     exit-code: '0'
    #     severity: 'MEDIUM,HIGH,CRITICAL'
      #Push the Docker image to Google Container Registry
    - name: Deploy to Cloud Run
      run: |-
        # Set project ID and region
        gcloud config set project $PROJECT_ID
        gcloud config set run/region us-central1
        
        # Deploy to Cloud Run using the image built in the previous step
        gcloud run deploy vuln-image \
          --image=${{ steps.build.outputs.image }} \
          --platform managed \
          --allow-unauthenticated
    
    # - name: Deploy to Cloud Run
    #   run: |-
    #     gcloud config set project $PROJECT_ID
    #     gcloud config set run/region us-central1
    #     gcloud run deploy $IMAGE --image=${{ steps.build.outputs.image }} \
    #     --platform managed \
    #     --allow-unauthenticated
    - name: snyk test
      continue-on-error: true
      run: |-
        npm install snyk -g 
        snyk auth 5db83b3a-a352-480d-9a97-e7a7af955133
        snyk code test
        # Ensure Java 17 is installed for HawkScan
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Check Java Version
      run: java -version
    
    - name: Run HawkScan
      uses: stackhawk/hawkscan-action@v2.2.0
      with:
        apiKey: hawk.5dbJjP5atUA823whAcFb.ZdhsXAaXtkIlq6lodfhH

    - name: Send Deployment Event to DataDog
      run: |-
        curl -X POST "https://api.datadoghq.com/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ce3cd01cc0cc4170b3159c2fe1a1d3b1" \
        -d '{
          "title": "Deployed DVWA to Cloud Run",
          "text": "DVWA was deployed successfully to Cloud Run.",
          "priority": "normal",
          "tags": ["env:production", "service:dvwa"],
          "alert_type": "info"
        }'
 
    - name: Run Synthetic Tests
      run: |-
        # Replace with your synthetic test ID
        TEST_ID="w5w-x49-hpg"
        API_KEY="ce3cd01cc0cc4170b3159c2fe1a1d3b1"
        curl -X POST "https://api.datadoghq.com/api/v1/synthetics/tests/$TEST_ID/run" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: $API_KEY"
 
    - name: Check Synthetic Test Results
      run: |-
        # Check the status of the synthetic tests
        TEST_ID="w5w-x49-hpg"
        API_KEY="ce3cd01cc0cc4170b3159c2fe1a1d3b1"
        STATUS=$(curl -s "https://api.datadoghq.com/api/v1/synthetics/tests/$TEST_ID/results" \
          -H "DD-API-KEY: $API_KEY" | jq -r '.results[0].status')
        echo "Synthetic test status: $STATUS"
        if [ "$STATUS" != "passed" ]; then
          echo "Synthetic tests failed."
          exit 1
        fi
 
    - name: Upload DataDog Metrics
      uses: actions/upload-artifact@v3
      with:
        name: DataDogMetrics
        path: /var/log/datadog/


    